// ==UserScript==
// @name         Отправляем запросы в чат и сохраняем статью
// @namespace    @seo_pro
// @version      1.0
// @description  Добавляет функционал для генерации статей и их сохранения
// @author       @seo_pro
// @match        https://chat.openai.com/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    var ArticlePlan = {
        init: function() {
            if (!this.textarea) {
                this.createTextarea();
                this.articleContent = '';
            } else {
                this.textarea.style.display = this.textarea.style.display === 'none' ? 'block' : 'none';
            }
        },

        createTextarea: function() {
            this.textarea = document.createElement('textarea');
            this.textarea.style.position = 'fixed';
            this.textarea.style.bottom = '150px'; // Adjusted for visibility
            this.textarea.style.right = '20px';
            this.textarea.style.width = '300px';
            this.textarea.style.height = '200px';
            document.body.appendChild(this.textarea);
        },

        executePlan: function() {
            this.lines = this.textarea.value.split('\n').filter(line => line.trim() !== '');
            if (this.lines.length > 0) {
                const line = this.lines.shift();
                this.textarea.value = this.lines.join('\n');
                executeChatCommand(line, () => {
                    this.waitForResponse(() => {
                        this.copyChatContent();
                        if (this.lines.length === 0) {
                            this.saveButton.style.display = 'block'; // Show the save button after the last plan item is processed
                        }
                    });
                });
            }
        },

        waitForResponse: function(callback) {
            const checkSendButton = setInterval(() => {
                const sendButton = document.querySelector('button[data-testid="send-button"]');
                if (sendButton && !sendButton.disabled) {
                    clearInterval(checkSendButton);
                    callback();
                }
            }, 500);
        },

        copyChatContent: function() {
            const chatContents = document.querySelectorAll('.markdown.prose.w-full.break-words.dark\\:prose-invert.light');
            let newContent = "";
            chatContents.forEach(content => {
                newContent += content.innerHTML + "<br>";
            });

            if (this.articleContent.trim() !== newContent.trim()) {
                this.articleContent = newContent;
            }
        },

        saveArticleContent: function() {
            this.copyChatContent(); // Update the article content before saving
            if (!this.articleContent.trim()) {
                alert("Статья пуста. Нет содержимого для сохранения.");
                return;
            }
            const blob = new Blob([this.articleContent], {type: 'text/html'});
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'article.html';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
        },
    };

    function executeChatCommand(text, callback) {
        const inputSelector = document.querySelector('input[type="text"], textarea');
        if (!inputSelector) {
            console.error("Input element not found.");
            return;
        }

        inputSelector.value = text;
        inputSelector.dispatchEvent(new Event('input', { bubbles: true }));

        setTimeout(() => {
            const sendButton = document.querySelector('button[data-testid="send-button"]');
            if (sendButton) {
                sendButton.click();
                callback();
            } else {
                console.error("Send button not found.");
            }
        }, 500);
    }

    function addCustomUI() {
        const menu = document.createElement('div');
        menu.style.position = 'fixed';
        menu.style.bottom = '47px';
        menu.style.right = '20px';
        menu.style.padding = '10px';
        menu.style.background = 'white';
        menu.style.border = '1px solid black';
        menu.style.zIndex = '10000';
        document.body.appendChild(menu);

        const addButton = document.createElement('button');
        addButton.textContent = 'Добавить план';
        addButton.style.display = 'block';
        addButton.style.marginBottom = '5px';
        addButton.onclick = () => ArticlePlan.init();
        menu.appendChild(addButton);

        const executeButton = document.createElement('button');
        executeButton.textContent = 'Выполнить план';
        executeButton.style.display = 'block';
        executeButton.style.marginBottom = '5px';
        executeButton.onclick = () => ArticlePlan.executePlan();
        menu.appendChild(executeButton);

        // Moved the creation of the save button here to ensure it's below the execute plan button
        const saveButton = document.createElement('button');
        saveButton.textContent = 'Сохранить статью';
        saveButton.style.display = 'none'; // Initially hidden
        saveButton.onclick = () => ArticlePlan.saveArticleContent();
        menu.appendChild(saveButton);
        ArticlePlan.saveButton = saveButton; // Assign to the global object for later access
    }

    addCustomUI();
})();
